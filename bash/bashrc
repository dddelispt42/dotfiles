#
# ~/.bashrc
#

stty -ixon -ixoff # turns off CTRL-S

# If not running interactively, don't do anything
[[ $- != *i* ]] && return

PS1='[\u@\h \W]\$ '

export TERM=xterm-256color

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# path shortcuts
CDPATH=".:~:~/projects:~/bin:~/dotfiles:~/docker"

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
#[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "$debian_chroot" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color) color_prompt=yes;;
    xterm-256color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
        # We have color support; assume it's compliant with Ecma-48
        # (ISO/IEC-6429). (Lack of such support is extremely rare, and such
        # a case would tend to support setf rather than setaf.)
        color_prompt=yes
    else
        color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\] \[\033[01;34m\]\w \$\[\033[00m\] '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

if [ -f /etc/bash_completion ] && ! shopt -oq posix; then
    source /etc/bash_completion
fi

# PATH=~/bin:~/.cargo/bin:~/opt/neovim/bin:~/.fzf/bin:$PATH
PATH=~/bin:~/.cargo/bin:~/opt/neovim/bin:~/opt:$PATH
export PATH

export NNTPSERVER=news.aioe.org
function vimTabs() {
    vim -p $*
}
export EDITOR="vimTabs"
export VISUAL="vimTabs"
export BROWSER=elinks
export PAGER=less
export XDG_CONFIG_HOME="$HOME/.config"

GREP=grep
test=`ps -ef | $GREP ssh-agent | $GREP -v grep | awk '{print $2}' | xargs`

if [ "$test" == "" ]; then
    # there is no agent running
    if [ -e "$HOME/agent.sh" ]; then
        # remove the old file
        rm -f $HOME/agent.sh
    fi;
    # start a new agent
    ssh-agent | $GREP -v echo >&$HOME/agent.sh
fi;

test -e $HOME/agent.sh && source $HOME/agent.sh

alias kagent="kill -9 $SSH_AGENT_PID"

function keyadd() {
    ssh-add $(diff <(ssh-add -L | sed -e 's/.* //'|sort) <(ls $HOME/.ssh/*id_* | grep -v "\.pub$"|sort) | grep --color=no -E "[<>] " | sed -e "s/[<>] //" | fzf)
}
function keyremove() {
    ssh-add -d $(ssh-add -L | sed -e 's/.* //' | fzf)
}
function keynew() {
    ssh-keygen -C "$(whoami)@$(hostname)-$(date -I)"
}
alias keylist="ssh-add -L"

# --files: List files that would be searched but do not search
# --no-ignore: Do not respect .gitignore, etc...
# --hidden: Search hidden files and folders
# --follow: Follow symlinks
# --glob: Additional conditions for search (in this case ignore everything in the .git/ folder)
# export FZF_DEFAULT_COMMAND='fd --type f'
# export FZF_DEFAULT_COMMAND='rg --files --no-ignore --hidden --follow --glob "!.git/*"'
export FZF_DEFAULT_COMMAND='rg --files --hidden --follow --no-ignore-vcs'
# export FZF_DEFAULT_OPTS='--height 40% --reverse --border --inline-info'
# export FZF_DEFAULT_OPTS="--reverse --preview='head -100 {}' --preview-window=right:50%:wrap"
export FZF_DEFAULT_OPTS=" --multi --preview='head -100 {}' --preview-window=right:50%:wrap"
# To apply the command to CTRL-T as well
export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"

# Helper functions
en() { IFS=+; lang=en; Q="${*// /%20}"; curl -s "https://dict.leo.org/${lang}de/?search=${Q//+/%20}" | html2text | grep -EA 900 '^\*{5} ' | grep -B 900 '^Weitere Aktionen$';}
pt() { IFS=+; lang=pt; Q="${*// /%20}"; curl -s "https://dict.leo.org/${lang}de/?search=${Q//+/%20}" | html2text | grep -EA 900 '^\*{5} ' | grep -B 900 '^Weitere Aktionen$';}
# translate () {lang="ru"; text=$*; wget -U "Mozilla/5.0" -qO - "http://translate.google.com/translate_a/t?client=t&text=$text&sl=auto&tl=$lang" | sed 's/\[\[\[\"//' | cut -d \" -f 1}

function tx() {
    $(((tmuxinator list | grep -v "^tmuxinator projects:$" | sed -e "s/  */\n/g" | sed -e "s/\(.*\)/tmuxinator: \1/") && (tmux list-sessions 2>&1 | grep -v "error connecting to" | grep -v "no server running" | sed -e "s/\(:.*\)/ # \1/") | sed -e "s/\(.*\)/tmux      : \1/") | sort -u | fzf | sed -e "s/tmuxinator:/tmuxinator start /" | sed -e "s/tmux      :/tmux a -d -t /" | sed -e "s/#.*$//")
}

function open() {
    echo $1
    #TODO make platform independent
    SAVEIFS=$IFS
    IFS=$(echo -en "\n\b")
    echo $1
    FILENAME="$(cd "$(dirname "$@")"; pwd)/$(basename "$@")"
    WINDOWSPATH="$(echo $FILENAME | sed -e 's/^\/cygdrive//' -e 's/^\///' -e 's/\//\\/g' -e 's/^./\0:/')"
    echo "cmd /c explorer \"$WINDOWSPATH\""
    cmd /c explorer "$WINDOWSPATH"
    IFS=$SAVEIFS
}

function fopen() {
    SAVEIFS=$IFS
    IFS=$(echo -en "\n\b")
    # $(fzf -d "\n" | sed -e "s/ /\\\\ /g" | sed -e "s/^\(.*\)/open   \1/")
    $(open $(fzf -d "\n" | sed -e "s/^\(.*\)/\1/"))
    IFS=$SAVEIFS
}

function home() {
    while : ; do
        ssh -t home "ssh 192.168.1.99"
        if [ $? -eq 0 ] ; then
            break
        fi
    done
}

function cssh() {
    while : ; do
        # echo -ne "\033]0;${USER}@${1}\007"
        sleep 30 &
        ssh -t $1 tmux a
        wait
        if [ $? -eq 0 ] ; then
            break
        fi
    done
}

function yt2mp3() {
    youtube-dl --extract-audio --audio-format mp3 --add-metadata --embed-thumbnail "$1"
}

function friday13th() {
    for y in $(seq 1946 2028); do echo -n "$y -> "; for m in $(seq 1 12); do NDATE=$(date --date "$y-$m-13" +%w); if [ $NDATE -eq 5 ]; then PRINTME=$(date --date "$y-$m-13" +%B);echo -n "$PRINTME "; fi; done; echo; done
}

function note() {
    pushd $NEXTCLOUD/Notes > /dev/null
    SAVEIFS=$IFS
    IFS=$(echo -en "\n\b")
    NOTE=""
    NOTE=$((echo "*** NEW NOTE ***"; find . -type f) | fzf)
    if [ "$NOTE" != "" ] ; then
        vim $NOTE
    fi
    IFS=$SAVEIFS
    popd > /dev/null
}

# TODO: generate path name
test -s ~/dotfiles/bash/alias.sh && source ~/dotfiles/bash/alias.sh || true
test -s ~/dotfiles/bash/fuzzy_functions.sh && source ~/dotfiles/bash/fuzzy_functions.sh || true
# TODO: test -s ~/dotfiles/bash/completion && source ~/dotfiles/bash/completion || true
test -s ~/dotfiles/bash/liquidprompt/liquidprompt && source ~/dotfiles/bash/liquidprompt/liquidprompt || true

# set term title
# echo -ne "\033]0;${USER}@${HOSTNAME}\007"

# include host specific settings
test -s ~/.bashrc.${HOSTNAME} && source ~/.bashrc.${HOSTNAME} || true

# alias tmux="TERM=xterm-256color tmux"
# set LANG="en_US.UTF-8"

# Some FZF shell helper
# Ctrl + r - search through bash history with fzf
# Ctrl + p - edit a file in vim from fzf
# mv dir/** - expand a directory with (**) and select from fzf
# Alt + c - change directory from fzf - see the update at the bottom for faster search with bfs.
# Ctrl + t - insert file from fzf into command
test -s ~/.fzf/shell/completion.bash && source ~/.fzf/shell/completion.bash || true
test -s ~/.fzf/shell/key-bindings.bash && source ~/.fzf/shell/key-bindings.bash || true

[ -f ~/.fzf.bash ] && source ~/.fzf.bash

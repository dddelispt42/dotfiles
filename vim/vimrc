" Encoding:
    set encoding=utf-8  " The encoding displayed.
    set fileencoding=utf-8  " The encoding written to file.

" Behavior:
    " Remove ALL auto-commands.  This avoids having the
    " autocommands twice when the vimrc file is sourced again.
    autocmd!
    set   autowrite     " auto save
    set   backspace=2   " clever use of backspace
    set   digraph       " needed for Umlauts
    set noerrorbells    " no annoying beeps
    set   visualbell    " use visual bell
    set   esckeys       "allow to user cursor keys
    set noinsertmode    " do not start vim in insert mode
    set   laststatus=2  " better status bar
    set   report=0
    set   ruler        "show the ruler
    set   showcmd     " show ongoing commands
    set   showmode      " show vim mode
    set textwidth=1000
    set directory=~/tmp,.,/var/tmp,/tmp
    set title
    set t_Co=256

" Spaces Tabs:
    syntax enable           " enable syntax processing
    filetype plugin indent on
    set tabstop=4       " number of visual spaces per TAB
    set softtabstop=4   " number of spaces in tab when editing
    set shiftwidth=4    " when indenting with '>', use 4 spaces width
    set expandtab       " tabs are spaces

" UI Config:
    set number              " show line numbers
    set relativenumber      " show relative line numbers above and below current line
    set showcmd             " show command in bottom bar
    set cursorline          " highlight current line
    filetype indent on      " load filetype-specific indent files
    set wildmenu            " visual autocomplete for command menu
    set lazyredraw          " redraw only when we need to.
    set showmatch           " highlight matching [{()}]

" Snipplets:
    iab Ytd <esc>:r!echo "TODO: ($USER) -"<cr>:m .-2<CR>==JgccA
    iab Yinfo <esc>:r!echo "INFO: ($USER) -"<cr>:m .-2<CR>==JgccA
    iab Ydate <esc>:r!date<cr>kJ
    iab Yme <esc>:r!echo $USER<cr>kJ

" PlantUML Syntax:
    au BufNewFile,BufRead *.uml set filetype=plantuml

" Buffer:
    map <F4>  :split<C-M>
    map <F5>  :bp<C-M>
    map <F6>  :bn<C-M>
    map <F7>  :bd<C-M>

" Key Mappings:
    " allow use of page up and down keys
    map <PageUp>   <C-B>
    map <PageDown> <C-F>
    " jump between buffers in normal mode
    nnoremap <c-h> <c-w>h
    nnoremap <c-j> <c-w>j
    nnoremap <c-k> <c-w>k
    nnoremap <c-l> <c-w>l
    " jump between buffers in visual mode
    xnoremap <c-h> <c-w>h
    xnoremap <c-j> <c-w>j
    xnoremap <c-k> <c-w>k
    xnoremap <c-l> <c-w>l

" Searching:
    set incsearch           " search as characters are entered
    set hlsearch            " highlight matches
    " turn off search highlight
    nnoremap <leader><space> :nohlsearch<CR>
    set   ignorecase        " search ifnoring the case
    set   magic
    " all special characters are interpreted (requires masking
    nnoremap / /\v
    vnoremap / /\v

" Folding:
    set foldenable          " enable folding
    set foldlevel=99
    set foldlevelstart=0   " open most folds by default
    set foldnestmax=10      " 10 nested fold max
    " space open/closes folds
    nnoremap <space> za
    set foldmethod=indent   " fold based on indent level
    " set foldmethod=marker
    " set foldlevel=0
    nnoremap <F2> zR
    nnoremap <F3> zM

" Movement:
    " move vertically by visual line
    nnoremap j gj
    nnoremap k gk
    " move to beginning/end of line
    nnoremap B ^
    nnoremap E $
    " " $/^ doesn't do anything
    " nnoremap $ <nop>
    " nnoremap ^ <nop>
    " highlight last inserted text
    nnoremap gV `[v`]

"Leader Shortcuts:
    let mapleader=","       " leader is comma
    " save session
    nnoremap <leader>s :mksession<CR>

" TMux:
    " allows cursor change in tmux mode
    " if exists('$TMUX')
    "     let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
    "     let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
    " else
    "     let &t_SI = "\<Esc>]50;CursorShape=1\x7"
    "     let &t_EI = "\<Esc>]50;CursorShape=0\x7"
    " endif

" Autogroups:
    augroup configgroup
        autocmd!
        autocmd VimEnter * highlight clear SignColumn
        " autocmd BufWritePre *.py
        "             \:call <SID>StripWhitespaces()
        " " autocmd BufWritePre *.php,*.py,*.js,*.txt,*.hs,*.java,*.md
        "             \:call <SID>StripTrailingWhitespaces()
        autocmd FileType java setlocal noexpandtab
        autocmd FileType java setlocal list
        autocmd FileType java setlocal listchars=tab:+\ ,eol:-
        autocmd FileType java setlocal formatprg=par\ -w80\ -T4
        autocmd FileType php setlocal expandtab
        autocmd FileType php setlocal list
        autocmd FileType php setlocal listchars=tab:+\ ,eol:-
        autocmd FileType php setlocal formatprg=par\ -w80\ -T4
        autocmd FileType ruby setlocal tabstop=2
        autocmd FileType ruby setlocal shiftwidth=2
        autocmd FileType ruby setlocal softtabstop=2
        autocmd FileType ruby setlocal commentstring=#\ %s
        autocmd FileType python setlocal commentstring=#\ %s
        autocmd BufEnter *.cls setlocal filetype=java
        autocmd BufEnter *.zsh-theme setlocal filetype=zsh
        autocmd BufEnter Makefile setlocal noexpandtab
        autocmd BufEnter *.sh setlocal tabstop=4
        autocmd BufEnter *.sh setlocal shiftwidth=4
        autocmd BufEnter *.sh setlocal softtabstop=4
        autocmd BufEnter *.uml,*.plantuml,*.puml setlocal nofoldenable
    augroup END

" Functions:
    " toggle between number and relativenumber
    function! ToggleNumber()
        if(&relativenumber == 1)
            set norelativenumber
            set number
        else
            set relativenumber
        endif
    endfunc

" Plugins: (Vundle)
    " Vundle
    set nocompatible              " required
    filetype off                  " required

    " set the runtime path to include Vundle and initialize
    set rtp+=~/.vim/bundle/Vundle.vim
    call vundle#begin()

    " alternatively, pass a path where Vundle should install plugins
    "call vundle#begin('~/some/path/here')

    " let Vundle manage Vundle, required
    Plugin 'gmarik/Vundle.vim'
    " see colorschemes http://bytefluent.com/vivify/
    Plugin 'flazz/vim-colorschemes'
    Plugin 'tpope/vim-fugitive'
    Plugin 'godlygeek/tabular'
    Plugin 'plasticboy/vim-markdown'
    " Plugin 'klen/python-mode'
    " Plugin 'valloric/youcompleteme'
    Plugin 'yggdroot/indentline'
    Plugin 'kien/ctrlp.vim'
    Plugin 'scrooloose/syntastic'
    Plugin 'scrooloose/nerdtree'
    Plugin 'altercation/vim-colors-solarized'
    Plugin 'tpope/vim-commentary'
    Plugin 'vim-airline/vim-airline'
    Plugin 'vim-airline/vim-airline-themes'
    Plugin 'elzr/vim-json'
    Plugin 'ntpeters/vim-better-whitespace'
    Plugin 'davidhalter/jedi-vim'
    Plugin 'ekalinin/Dockerfile.vim'
    Plugin 'rust-lang/rust.vim'
    Plugin 'xuyuanp/nerdtree-git-plugin'
    Plugin 'chrisbra/csv.vim'
    Plugin 'jmcantrell/vim-virtualenv'
    Plugin 'ap/vim-css-color'
    Plugin 'tomasr/molokai'
    Plugin 'aklt/plantuml-syntax'
    Plugin 'scrooloose/vim-slumlord'
    Plugin 'nathanalderson/yang.vim'
    Plugin 'junegunn/gv.vim'
    Plugin 'airblade/vim-gitgutter'
    " interesting but not yet configured
    Plugin 'bling/vim-bufferline'
    " interesting but not yet configured
    Plugin 'sjl/gundo.vim'
    " interesting but not yet configured
    Plugin 'mileszs/ack.vim'

    " add all your plugins here (note older versions of Vundle
    " used Bundle instead of Plugin)

    " All of your Plugins must be added before the following line
    call vundle#end()            " required
    filetype plugin indent on    " required
    syntax on

" Plugin Settings:
    " Fugitive
    " set statusline+=%{fugitive#statusline()}

    " CtrlP settings
    let g:ctrlp_map = '<c-p>'
    let g:ctrlp_cmd = 'CtrlP'
    " let g:ctrlp_match_window = 'bottom,order:ttb'
    " let g:ctrlp_switch_buffer = 0
    " let g:ctrlp_working_path_mode = 0
    " let g:ctrlp_user_command = 'ag %s -l --nocolor --hidden -g ""'
    let g:ctrlp_working_path_mode = 'ra'
    set wildignore+=*\\tmp\\*,*.swp,*.zip,*.exe  " Windows
    set wildignore+=*/tmp/*,*.so,*.swp,*.zip     " Linux/MacOSX
    let g:ctrlp_custom_ignore = '\v[\/]\.(git|hg|svn)$'
    " let g:ctrlp_user_command = 'find %s -type f'        " MacOSX/Linux
    " let g:ctrlp_user_command = 'dir %s /-n /b /s /a-d'  " Windows
    " let g:ctrlp_user_command = ['.git', 'cd %s && git ls-files']
    " let g:ctrlp_user_command = ['.git', 'cd %s && git ls-files . -co --exclude-standard', 'find %s -type f']
    " let g:ctrlp_user_command = ['.hg', 'hg --cwd %s locate -I .']
    let g:ctrlp_user_command = {
        \ 'types': {
            \ 1: ['.git', 'cd %s && git ls-files'],
            \ 2: ['.hg', 'hg --cwd %s locate -I .'],
        \ },
        \ 'fallback': 'find %s -type f'
    \ }

    " Syntastic
    let g:syntastic_always_populate_loc_list = 1
    let g:syntastic_auto_loc_list = 1
    let g:syntastic_check_on_open = 1
    let g:syntastic_check_on_wq = 1

    let g:syntastic_python_checkers = ['pylint']
    let g:syntastic_aggregate_errors = 1
    let g:syntastic_always_populate_loc_list = 1

    " Markdown
    let g:vim_markdown_folding_style_pythonic = 1

    " Python-mode
    " let g:pymode_python = 'python3'

    " Indent guides
    let g:indent_guides_enable_on_vim_startup = 1
    let g:indent_guides_auto_colors = 1
    autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  guibg=red ctermbg=3
    autocmd VimEnter,Colorscheme * :hi IndentGuidesEven guibg=green ctermbg=4

    " NerdTree
    " Use <-C-n> as shortcut
    map <C-n> :NERDTreeToggle<CR>
    " Start automatically if no file is opened
    autocmd StdinReadPre * let s:std_in=1
    autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
    " Close vim if only Nerdtree is open
    autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
    " custom arrows
    let g:NERDTreeDirArrowExpandable = '>'
    let g:NERDTreeDirArrowCollapsible = 'v'
    " let g:NERDTreeDirArrowExpandable = '▸'
    " let g:NERDTreeDirArrowCollapsible = '▾'

    " NerdTree-git-plugin
    let g:NERDTreeIndicatorMapCustom = {
        \ "Modified"  : "✹",
        \ "Staged"    : "✚",
        \ "Untracked" : "✭",
        \ "Renamed"   : "➜",
        \ "Unmerged"  : "═",
        \ "Deleted"   : "✖",
        \ "Dirty"     : "✗",
        \ "Clean"     : "✔︎",
        \ 'Ignored'   : '☒',
        \ "Unknown"   : "?"
        \ }
     " show ignore files - heavy on performance
     let g:NERDTreeShowIgnoredStatus = 1

    " Rust.vim
    let g:rustfmt_autosave = 1
    let g:rust_clip_command = 'xclip -selection clipboard'

    " vim-better-whitespace
    " let g:better_whitespace_verbosity=1
    autocmd FileType *.py,*.sh,*.rs autocmd BufEnter <buffer> EnableStripWhitespaceOnSave

    " Plantuml-syntax
    let g:plantuml_executable_script = "~/bin/plantUML.sh"

    " ack.vim
    if executable('ag')
        let g:ackprg = 'ag --vimgrep'
    endif
    cnoreabbrev Ack Ack!
    " open ack in new tab
    nnoremap <Leader>a :tab split<cr>:Ack! ""<left>
    " open ack in new tab
    nnoremap <Leader>A :tab split<cr>:Ack! <c-r><c-w><cr>

" Colorscheme:
    syntax enable

    " Color solarized
    set background=dark
    colorscheme solarized
    if has('gui_running')
        set background=light
    else
        set background=dark
    endif
    let g:solarized_termcolors=256
    let g:solarized_termtrans = 0
    let g:solarized_contrast = 'low'
    let g:solarized_visibility = 'high'
    " let g:solarized_degrade = 1
    " call togglebg#map("<F2>")

    " Molokai
    colorscheme molokai
    let g:molokai_original = 1
    let g:rehash256 = 1

    let g:airline_theme='molokai'

    " Gundo
    nnoremap <F8> :GundoToggle<CR>

" Statusline:
    set statusline=%f
    set statusline+=%#warningmsg#
    set statusline+=%{SyntasticStatuslineFlag()}
    set statusline+=%*
    set statusline+=%m
    set statusline+=%{fugitive#statusline()}
    " set statusline+=\ %{fugitive#head()}
    set statusline+=%=
    set statusline+=%{''.(&fenc!=''?&fenc:&enc).''}
    set statusline+=/
    set statusline+=%{&ff}            "file format
    set statusline+=\ -\      " Separator
    set statusline+=%l/%L
    set statusline+=[%p%%]
    set statusline+=\ -\      " Separator
    set statusline +=%1*\ %y\ %*

" Moving:
    " Moving things in visual mode
    xnoremap K :move '<-2<cr>gv=gv
    xnoremap J :move '>+1<cr>gv=gv

" Vimdiff
    set diffopt+=iwhite
    set diffexpr=""
    set scrollbind

" Misc:
    " visualize whitespaces
    set list
    set listchars=nbsp:¬,tab:»·,trail:·
    " Breaking lines with \[enter] without having to go to insert mode (myself).
    nmap <leader><cr> i\<cr><Esc>
    " Reload changes to .vimrc automatically
    autocmd BufWritePost ~/.vimrc source ~/.vimrc
    " Show a max line indicator
    set colorcolumn=100
    " find long lines
    map <F9> /\%>100v.\+
    map :grep :%!/usr/xpg4/bin/grep
    " Update term title but restore old title after leaving Vim
    set title
    set titleold=

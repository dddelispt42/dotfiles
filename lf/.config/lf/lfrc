# interpreter for shell commands (needs to be POSIX compatible)
set shell zsh

# set '-eu' options for shell commands
# These options are used to have safer shell commands. Option '-e' is used to
# exit on error and option '-u' is used to give error for unset variables.
# Option '-f' disables pathname expansion which can be useful when $f, $fs, and
# $fx variables contain names with '*' or '?' characters. However, this option
# is used selectively within individual commands as it can be limiting at
# times.
# set shellopts '-eu'
set shellopts '-eu:--shwordsplit'

# set internal field separator (IFS) to "\n" for shell commands
# This is useful to automatically split file names in $fs and $fx properly
# since default file separator used in these variables (i.e. 'filesep' option)
# is newline. You need to consider the values of these options and create your
# commands accordingly.
set filesep "\n"
# set ifs "\n\t"
set ifs "\n"

# leave some space at the top and the bottom of the screen
set scrolloff 10

# dynamic number of rows
%{{
    w=$(tput cols)
    if [ $w -le 80 ]; then
        lf -remote "send $id set ratios 1:2"
    elif [ $w -le 160 ]; then
        lf -remote "send $id set ratios 1:2:3"
    else
        lf -remote "send $id set ratios 1:2:3:5"
    fi
}}

# execute current file (must be executable)
map x $$f
map X !$f

# dedicated keys for file opener actions
map o &~/.config/lf/open.sh $fx
# map O ~/.config/lf/open.sh $fx

# use enter for shell commands
# map <enter> shell
map <enter> &~/.config/lf/open.sh $fx

# bulk rename
map br $vimv $fx

# define a custom 'rename' command without prompt for overwrite
# cmd rename %[ -e $1 ] && printf "file exists" || mv $f $1
# map r push :rename<space>

# move current file or selected files to trash folder
# (also see 'man mv' for backup/overwrite options)
cmd trash $trash-put $fx
map D trash $fx
# cmd open-file $rifle $f .
map f $vi $(fzf)

# define a custom 'delete' command
# cmd delete ${{
#     set -f
#     printf "$fx\n"
#     printf "delete?[y/n]"
#     read ans
#     [ $ans = "y" ] && rm -rf $fx
# }}

# use '<delete>' key for either 'trash' or 'delete' command
# map <delete> trash
# map <delete> delete

# cmd rifle ${{
#     set -f
#     rifle -l $f
#     read -p "Select runner: " runner
#     rifle -p $runner $f
# }}

# extract the current file with the right command
# (xkcd link: https://xkcd.com/1168/)
cmd extract ${{
    set -f
    case $f in
        *.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar xjvf $f;;
        *.tar.gz|*.tgz) tar xzvf $f;;
        *.tar.xz|*.txz) tar xJvf $f;;
        *.zip) unzip $f;;
        *.rar) unrar x $f;;
        *.7z) 7z x $f;;
    esac
}}

# compress current file or selected files with tar and gunzip
cmd tar ${{
    set -f
    mkdir $1
    cp -r $fx $1
    tar czf $1.tar.gz $1
    rm -rf $1
}}

# compress current file or selected files with zip
cmd zip ${{
    set -f
    mkdir $1
    cp -r $fx $1
    zip -r $1.zip $1
    rm -rf $1
}}

set dircounts on
set dirfirst on
set icons on
set hidden off
set relativenumber on
set tabstop 4
set info size:time
set sortby natural
set preview on

map gC :cd '~/.config/lf'
map gD :cd '~/Documents'
map gT :cd '/tmp'
map gb :cd '~/bin'
map g. :cd '~/dev/heiko/dotfiles'
map gh :cd '~'
map gi :cd '~/dev'
map gl :cd '~/dl'
map gk :cd '~/klaut'
map go :cd '~/opt'
map gr :cd '/'
map gv :cd '~/klaut/vimwiki'

cmd usage !du -sk * | sort -n | bat
map U usage

set previewer ~/.config/lf/preview.sh
# map i $~/.config/lf/preview.sh $f | bat
map i $~/.config/lf/preview.sh $f | less -R

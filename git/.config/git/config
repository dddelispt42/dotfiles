[https]
    sslverify = true
[user]
    name = Heiko Riemer
    email = heiko@eheiko.net
[credential]
    helper = cache
[core]
    editor = nvim
    autocrlf = false
    filemode = false
    pager = delta
    excludesfile = ~/.config/git/ignore
    attributesfile = ~/.config/git/attributes
[interactive]
    diffFilter = delta --color-only
[delta]
    features = catppuccin-frappe side-by-side line-numbers decorations
    ; features = catppuccin-frappe side-by-side line-numbers
    whitespace-error-style = 22 reverse
[delta "decorations"]
    commit-decoration-style = bold yellow box ul
    file-style = bold yellow ul
    file-decoration-style = none
[github]
    user = dddelispt42
[color]
    ui = auto
[alias]
    aa = add --all
    af = autofixup
    ap = add --patch
    b = branch
    ba = branch -a
    br = branch
    ca = commit --amend
    cd = diff --word-diff=color --word-diff-regex=. --ignore-all-space
    cds = diff --staged --word-diff=color --word-diff-regex=. --ignore-all-space
    chp = cherry-pick
    ci = commit -v
    cam = commit -a -m
    cim = commit -v -m
    co = checkout
    cb = checkout -b
    ; Usage:
    ; git change-commits GIT_AUTHOR_NAME "old name" "new name"
    ; git change-commits GIT_AUTHOR_EMAIL "old email" "new email"
    change-commits="!f() { VAR1=$1; VAR='$'$1; OLD=$2; NEW=$3; echo \"Are you sure for replace $VAR  $OLD => $NEW ?(Y/N)\";read OK;if [ \"$OK\" = 'Y' ] ; then shift 3; git filter-branch  --env-filter \"if [ \\\"${VAR}\\\" = '$OLD' ]; then export $VAR1='$NEW';echo 'to $NEW'; fi\" $@; fi;};  f "
    cs = show --minimal --word-diff=color --word-diff-regex=. --ignore-all-space
    di = diff --minimal
    dc = diff --cached
    dft = difftool
    dfst = diff --stat
    dls = diff-tree --no-commit-id --name-status -r
    ds = diff --minimal --staged
    ff = merge --ff-only
    gpg = log --show-signature
    ign = ls-files -o -i --exclude-standard
    noff = merge --no-ff
    gr = log --all --graph --decorate --oneline
    l = log --graph --pretty="tformat:%C(yellow)%h%Creset\\ %Cgreen(%ar)%Creset\\ %C(blue)<%an,\\ %ae>%Creset\\ %C(red)%d%Creset\\ %s\\ %C(blue)%G?"
    lg = log --oneline --reverse
    kill-branches = "!f() { git branch | awk '!/^*|master/ {print $1 }' | xargs git branch ${1--d};}; f"
    mt = mergetool
    mylog = log --stat
    pf = push --force-with-lease
    pom = push origin master
    pgm = push github master
    rb = rebase
    rbc = rebase --continue
    rbi = rebase -i --keep-base
    rv = remote -v
    s = status
    slog = log --pretty=oneline --abbrev-commit
    st = status
    stat = status
    su = status -u
    uncommit = reset HEAD~1 --mixed
    f = fetch
    fp = fetch --prune
    fa = fetch --all
    r = reset
    rh = reset --hard
    up = !git fetch --recurse-submodules origin && git rebase origin/$((git symbolic-ref refs/remotes/origin/HEAD || echo main) | sed 's@^refs/remotes/origin/@@')
    upgh = !git fetch --recurse-submodules github && git rebase github/$((git symbolic-ref refs/remotes/origin/HEAD || echo main) | sed 's@^refs/remotes/origin/@@')
    upus = !git fetch --recurse-submodules upstream && git rebase upstream/$((git symbolic-ref refs/remotes/origin/HEAD || echo main) | sed 's@^refs/remotes/origin/@@')
    upuus = !git fetch --recurse-submodules upupstream && git rebase upupstream/$((git symbolic-ref refs/remotes/origin/HEAD || echo main) | sed 's@^refs/remotes/origin/@@')
    ws = show --minimal --word-diff=color --ignore-all-space
[push]
    autoSetupRemote = true
[diff]
    ; tool = nvimdiff
    tool = difftastic
    ; tool = delta
[difftool]
    prompt = false
[difftool "difftastic"]
    command = difft --color always "$LOCAL" "$REMOTE"
; [diff "json"]
;     command = jdiff "$LOCAL" "$REMOTE"
[diff "latex"]
    command = latexdiff "$LOCAL" "$REMOTE"
[diff "preview.sh"]
    binary = true
    textconv = ~/.config/lf/preview.sh
[merge]
    tool = nvimdiff
[mergetool "nvimdiff4"]
    command = nvim -d $LOCAL $BASE $REMOTE $MERGED -c '$wincmd w' -c 'wincmd J' -c 'set diffopt&' -c 'set diffopt+=algorithm:patience'
    keepBackup = false
[color "diff"]
    meta = yellow
    commit = yellow
    frag = magenta
    old = red
    new = green
    whitespace = red reverse
[color "diff-highlight"]
    oldNormal = red
    oldHighlight = "red 52"
    newNormal = "green"
    newHighlight = "green 22"
[color "branch"]
    current = yellow reverse
    local = yellow
    remote = blue
[color "status"]
    added = green
    changed = yellow
    untracked = cyan
[sequence]
    editor = interactive-rebase-tool
[pull]
    ff = only
[status]
    submodulesummary = 1
[gpg]
    ; program = gpg
    format =ssh
[gpgv]
    program = gpgv
[gpg "ssh"]
    allowedSignersFile = ~/.ssh/allowed_signers
    defaultKeyCommand = ssh-add -L
[commit]
    gpgsign = true
    verbose = true
[init]
    defaultBranch = main
[tag]
    gpgsign = true
    forceSignAnnotated = true
    sort = version:refname
[credential "https://github.com"]
    helper =
    helper = !/usr/bin/gh auth git-credential
[credential "https://gist.github.com"]
    helper =
    helper = !/usr/bin/gh auth git-credential
[rerere]
    enabled = true
[branch]
    sort = -committerdate
[log]
    date = local
[include]
    path = ~/.config/git/catppuccin.gitconfig
[includeIf "hasconfig:remote.*.url:https://git@bitbucket.infinera.com/*/**"]
    path = ~/.config/gitconfig.work
[includeIf "hasconfig:remote.*.url:https://git@bitbucket.infinera.com/*/*/**"]
    path = ~/.config/gitconfig.work
[includeIf "hasconfig:remote.*.url:ssh://git@bitbucket.infinera.com:7999/**"]
    path = ~/.config/gitconfig.work
